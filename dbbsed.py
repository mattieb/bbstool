#!/usr/bin/env python
# -*- coding: ISO-8859-1 -*-
# generated by wxGlade 0.3.5.1 on Sat May  7 09:25:47 2005

# $Id$
#
# Copyright (c) 2005 Matt Behrens.
#
# Permission is hereby granted, free of charge, to any person obtaining
# a copy of this software and associated documentation files (the
# "Software"), to deal in the Software without restriction, including
# without limitation the rights to use, copy, modify, merge, publish,
# distribute, sublicense, and/or sell copies of the Software, and to
# permit persons to whom the Software is furnished to do so, subject to
# the following conditions:
#
# The above copyright notice and this permission notice shall be included
# in all copies or substantial portions of the Software.
#
# THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY
# KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE
# WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND
# NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE
# LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION
# OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION
# WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.

import wx

import dbbsave
import maxds
import savedump
import m3

MENU_OPEN_MAXDS = wx.NewId()
MENU_OPEN_M3 = wx.NewId()
MENU_OPEN_SAVEDUMP = wx.NewId()

MENU_SAVE = wx.NewId()
MENU_SAVE_AS = wx.NewId()
MENU_IMPORT_DATA = wx.NewId()
MENU_EXPORT_DATA = wx.NewId()

MENUS_DISABLED_BEFORE_OPEN = (MENU_SAVE, MENU_SAVE_AS, MENU_IMPORT_DATA,
        MENU_EXPORT_DATA)

LIST_SCORE = wx.NewId()

BUTTON_MOVE_UP = wx.NewId()
BUTTON_MOVE_DOWN = wx.NewId()
BUTTON_IMPORT = wx.NewId()
BUTTON_EXPORT = wx.NewId()
BUTTON_ABOUT_OK = wx.NewId()

WILDCARD_SCORE = "Daigasso! Band Brothers score files (*.bbs)|*.bbs"
WILDCARD_DATA = "Daigasso! Band Brothers game data (*.bbd)|*.bbd"

class MainFrame(wx.Frame):
    def __init__(self, *args, **kwds):
        # begin wxGlade: MainFrame.__init__
        kwds["style"] = wx.DEFAULT_FRAME_STYLE
        wx.Frame.__init__(self, *args, **kwds)
        
        # Menu Bar
        self.main_frame_menubar = wx.MenuBar()
        self.SetMenuBar(self.main_frame_menubar)
        self.file_menu = wx.Menu()
        self.file_menu_sub = wx.Menu()
        self.file_menu_sub.Append(MENU_OPEN_MAXDS, "&Action Replay MAX for DS uncompressed save file...", "", wx.ITEM_NORMAL)
        self.file_menu_sub.Append(MENU_OPEN_M3, "&M3 Adapter save file...", "", wx.ITEM_NORMAL)
        self.file_menu_sub.Append(MENU_OPEN_SAVEDUMP, "&Save dump...", "", wx.ITEM_NORMAL)
        self.file_menu.AppendMenu(wx.NewId(), "&Open", self.file_menu_sub, "")
        self.file_menu.AppendSeparator()
        self.file_menu.Append(MENU_SAVE, "&Save", "", wx.ITEM_NORMAL)
        self.file_menu.Append(MENU_SAVE_AS, "Save &As...", "", wx.ITEM_NORMAL)
        self.file_menu.AppendSeparator()
        self.file_menu.Append(MENU_IMPORT_DATA, "&Import Game Data...", "", wx.ITEM_NORMAL)
        self.file_menu.Append(MENU_EXPORT_DATA, "&Export Game Data...", "", wx.ITEM_NORMAL)
        self.file_menu.AppendSeparator()
        self.file_menu.Append(wx.ID_EXIT, "E&xit", "", wx.ITEM_NORMAL)
        self.main_frame_menubar.Append(self.file_menu, "&File")
        self.help_menu = wx.Menu()
        self.help_menu.Append(wx.ID_ABOUT, "&About...", "", wx.ITEM_NORMAL)
        self.main_frame_menubar.Append(self.help_menu, "&Help")
        # Menu Bar end
        self.score_list_box = wx.ListBox(self, LIST_SCORE, choices=["", "", "", "", "", "", "", ""], style=wx.LB_SINGLE)
        self.move_up_button = wx.Button(self, BUTTON_MOVE_UP, "Move &Up")
        self.move_down_button = wx.Button(self, BUTTON_MOVE_DOWN, "Move &Down")
        self.import_button = wx.Button(self, BUTTON_IMPORT, "&Import...")
        self.export_button = wx.Button(self, BUTTON_EXPORT, "&Export...")

        self.__set_properties()
        self.__do_layout()
        # end wxGlade

        # rig up events
        wx.EVT_MENU(self, MENU_OPEN_MAXDS, self.open_maxds)
        wx.EVT_MENU(self, MENU_OPEN_M3, self.open_m3)
        wx.EVT_MENU(self, MENU_OPEN_SAVEDUMP, self.open_savedump)
        wx.EVT_MENU(self, MENU_SAVE, self.save)
        wx.EVT_MENU(self, MENU_SAVE_AS, self.save_as)
        wx.EVT_MENU(self, MENU_IMPORT_DATA, self.import_game_data)
        wx.EVT_MENU(self, MENU_EXPORT_DATA, self.export_game_data)
        wx.EVT_MENU(self, wx.ID_EXIT, self.exit)
        wx.EVT_MENU(self, wx.ID_ABOUT, self.show_about)

        wx.EVT_LISTBOX(self, LIST_SCORE, self.update_buttons)

        wx.EVT_BUTTON(self, BUTTON_MOVE_UP, self.move_score_up)
        wx.EVT_BUTTON(self, BUTTON_MOVE_DOWN, self.move_score_down)
        wx.EVT_BUTTON(self, BUTTON_IMPORT, self.import_score)
        wx.EVT_BUTTON(self, BUTTON_EXPORT, self.export_score)

        # disable menu items
        for item in MENUS_DISABLED_BEFORE_OPEN:
            self.file_menu.Enable(item, False)

    def __set_properties(self):
        # begin wxGlade: MainFrame.__set_properties
        self.SetTitle("Save Editor")
        self.score_list_box.Enable(False)
        self.score_list_box.SetSelection(0)
        self.move_up_button.Enable(False)
        self.move_down_button.Enable(False)
        self.import_button.Enable(False)
        self.export_button.Enable(False)
        # end wxGlade

    def __do_layout(self):
        # begin wxGlade: MainFrame.__do_layout
        score_list_sizer = wx.BoxSizer(wx.HORIZONTAL)
        buttons_sizer = wx.BoxSizer(wx.VERTICAL)
        score_list_sizer.Add(self.score_list_box, 0, wx.LEFT|wx.TOP|wx.BOTTOM|wx.EXPAND, 8)
        buttons_sizer.Add(self.move_up_button, 0, wx.EXPAND, 0)
        buttons_sizer.Add(self.move_down_button, 0, wx.TOP|wx.EXPAND, 8)
        buttons_sizer.Add(self.import_button, 0, wx.TOP|wx.EXPAND, 8)
        buttons_sizer.Add(self.export_button, 0, wx.TOP|wx.EXPAND, 8)
        score_list_sizer.Add(buttons_sizer, 1, wx.ALL|wx.EXPAND, 8)
        self.SetAutoLayout(True)
        self.SetSizer(score_list_sizer)
        score_list_sizer.Fit(self)
        score_list_sizer.SetSizeHints(self)
        self.Layout()
        # end wxGlade

    def exit(self, event):
        self.Destroy()

    def show_about(self, event):
        about_dialog = AboutDialog(None, -1, "")
        about_dialog.ShowModal()
        about_dialog.Destroy()

    def update_score_list(self):
        self.score_list_box.Clear()
        for score in self.save_file.save.scores:
            if score.valid:
                try:
                    self.score_list_box.Append(score.title)
                except TypeError:
                    self.score_list_box.Append(score.title.encode("ascii",
                        "replace"))
            else:
                self.score_list_box.Append("(Empty or invalid)")

    def _open(self, package):
        open_dialog = wx.FileDialog(self, wildcard=package.WILDCARD,
                style=wx.OPEN)
        if open_dialog.ShowModal() == wx.ID_OK:
            self.save_file_name = open_dialog.GetPath()
            try:
                self.save_file = package.SaveFile(open(self.save_file_name,
                        "rb"), dbbsave.Save)
                
                self.update_score_list()
                self.enable_file_controls()
            except IOError, e:
                error_dialog = wx.MessageDialog(self,
                        "Error opening file: %s" % e, "Error", wx.ICON_ERROR)
                error_dialog.ShowModal()
                error_dialog.Destroy()
            except ValueError, e:
                error_dialog = wx.MessageDialog(self,
                        "Error opening file: %s" % e, "Error", wx.ICON_ERROR)
                error_dialog.ShowModal()
                error_dialog.Destroy()

        open_dialog.Destroy()

    def open_maxds(self, event):
        return self._open(maxds)

    def open_m3(self, event):
        return self._open(m3)

    def open_savedump(self, event):
        return self._open(savedump)

    def enable_file_controls(self):
        self.score_list_box.Enable(True)
        for item in MENUS_DISABLED_BEFORE_OPEN:
            self.file_menu.Enable(item, True)

    def update_buttons(self, event):
        selection = self.score_list_box.GetSelection()
        if selection != wx.NOT_FOUND:
            self.move_up_button.Enable(selection != 0)
            self.move_down_button.Enable(selection != 7)
            self.import_button.Enable(True)
            self.export_button.Enable(True)
        else:
            self.move_up_button.Enable(False)
            self.move_down_button.Enable(False)
            self.import_button.Enable(False)
            self.export_button.Enable(False)

    def move_score_up(self, event):
        selection = self.score_list_box.GetSelection()
        if selection > 0 and selection != wx.NOT_FOUND:
            scores = self.save_file.save.scores
            swap = scores[selection - 1]
            scores[selection - 1] = scores[selection]
            scores[selection] = swap
            self.update_score_list()
            self.score_list_box.SetSelection(selection - 1)
            self.update_buttons(None)

    def move_score_down(self, event):
        selection = self.score_list_box.GetSelection()
        if selection < 7 and selection != wx.NOT_FOUND:
            scores = self.save_file.save.scores
            swap = scores[selection + 1]
            scores[selection + 1] = scores[selection]
            scores[selection] = swap
            self.update_score_list()
            self.score_list_box.SetSelection(selection + 1)
            self.update_buttons(None)

    def import_score(self, event):
        selection = self.score_list_box.GetSelection()
        if selection != wx.NOT_FOUND:
            open_dialog = wx.FileDialog(self, wildcard=WILDCARD_SCORE,
                    style=wx.OPEN)
            if open_dialog.ShowModal() == wx.ID_OK:
                try:
                    score_file = open(open_dialog.GetPath(), "rb")
                    score = dbbsave.Score(score_file)
                    self.save_file.save.scores[selection] = score
                    score_file.close()
                    self.update_score_list()
                    self.score_list_box.SetSelection(selection)
                    self.update_buttons(None)
                except ValueError, e:
                    error_dialog = wx.MessageDialog(self,
                            "Error reading file: %s" % e,
                            "Error", wx.ICON_ERROR)
                    error_dialog.ShowModal()
                    error_dialog.Destroy()
            open_dialog.Destroy()

    def export_score(self, event):
        selection = self.score_list_box.GetSelection()
        if selection != wx.NOT_FOUND:
            save_dialog = wx.FileDialog(self, wildcard=WILDCARD_SCORE,
                    style=wx.SAVE|wx.OVERWRITE_PROMPT)
            if save_dialog.ShowModal() == wx.ID_OK:
                score_file = open(save_dialog.GetPath(), "wb")
                self.save_file.save.scores[selection].write(score_file)
                score_file.close()
            save_dialog.Destroy()

    def save(self, event):
        save_file = open(self.save_file_name, "wb")
        self.save_file.write(save_file)
        save_file.close()

    def save_as(self, event):
        if self.save_file.__class__ == maxds.SaveFile:
            save_dialog = wx.FileDialog(self, wildcard=dsmax.WILDCARD,
                    style=wx.SAVE|wx.OVERWRITE_PROMPT)
            if save_dialog.ShowModal() == wx.ID_OK:
                self.save_file_name = save_dialog.GetPath()
                self.save(None)
            save_dialog.Destroy()
        elif self.save_file.__class__ == savedump.SaveFile:
            save_dialog = wx.FileDialog(self, wildcard=savedump.WILDCARD,
                    style=wx.SAVE|wx.OVERWRITE_PROMPT)
            if save_dialog.ShowModal() == wx.ID_OK:
                self.save_file_name = save_dialog.GetPath()
                self.save(None)
            save_dialog.Destroy()
        elif self.save_file.__class__ == m3.SaveFile:
            save_dialog = wx.FileDialog(self, wildcard=m3.WILDCARD,
                    style=wx.SAVE|wx.OVERWRITE_PROMPT)
            if save_dialog.ShowModal() == wx.ID_OK:
                self.save_file_name = save_dialog.GetPath()
                self.save(None)
            save_dialog.Destroy()
        else:
            raise NotImplementedError

    def import_game_data(self, event):
        open_dialog = wx.FileDialog(self, wildcard=WILDCARD_DATA,
                style=wx.OPEN)
        if open_dialog.ShowModal() == wx.ID_OK:
            try:
                game_data_file = open(open_dialog.GetPath(), "rb")
                game_data = dbbsave.GameData(game_data_file)
                self.save_file.save.game_data = game_data
                game_data_file.close()
            except ValueError, e:
                error_dialog = wx.MessageDialog(self,
                        "Error reading file: %s" % e, "Error", wx.ICON_ERROR)
                error_dialog.ShowModal()
                error_dialog.Destroy()
        open_dialog.Destroy()

    def export_game_data(self, event):
        save_dialog = wx.FileDialog(self, wildcard=WILDCARD_DATA,
                style=wx.SAVE|wx.OVERWRITE_PROMPT)
        if save_dialog.ShowModal() == wx.ID_OK:
            game_data_file = open(save_dialog.GetPath(), "wb")
            self.save_file.save.game_data.write(game_data_file)
            game_data_file.close()
        save_dialog.Destroy()

# end of class MainFrame

class AboutDialog(wx.Dialog):
    def __init__(self, *args, **kwds):
        # begin wxGlade: AboutDialog.__init__
        kwds["style"] = wx.DEFAULT_DIALOG_STYLE
        wx.Dialog.__init__(self, *args, **kwds)
        self.name_text = wx.StaticText(self, -1, "Daigasso! Band Brothers Save Editor")
        self.author_text = wx.StaticText(self, -1, "Matt Behrens <matt@zigg.com>\nhttp://www.zigg.com/code/ddbsed/", style=wx.ALIGN_CENTRE)
        self.ok_button = wx.Button(self, wx.ID_OK, "&Close")

        self.__set_properties()
        self.__do_layout()
        # end wxGlade

    def __set_properties(self):
        # begin wxGlade: AboutDialog.__set_properties
        self.SetTitle("About")
        self.name_text.SetFont(wx.Font(18, wx.DEFAULT, wx.NORMAL, wx.NORMAL, 0, ""))
        self.ok_button.SetDefault()
        # end wxGlade

    def __do_layout(self):
        # begin wxGlade: AboutDialog.__do_layout
        about_sizer = wx.BoxSizer(wx.VERTICAL)
        about_sizer.Add(self.name_text, 0, wx.ALL|wx.ALIGN_CENTER_HORIZONTAL|wx.ALIGN_CENTER_VERTICAL, 4)
        about_sizer.Add(self.author_text, 0, wx.ALL|wx.ALIGN_CENTER_HORIZONTAL|wx.ALIGN_CENTER_VERTICAL, 4)
        about_sizer.Add(self.ok_button, 0, wx.ALL|wx.ALIGN_CENTER_HORIZONTAL|wx.ALIGN_CENTER_VERTICAL, 4)
        self.SetAutoLayout(True)
        self.SetSizer(about_sizer)
        about_sizer.Fit(self)
        about_sizer.SetSizeHints(self)
        self.Layout()
        # end wxGlade

# end of class AboutDialog


class App(wx.App):
    def OnInit(self):
        wx.InitAllImageHandlers()
        main_frame = MainFrame(None, -1, "")
        self.SetTopWindow(main_frame)
        main_frame.Show()
        return 1

# end of class App


if __name__ == "__main__":
    app = App(1, "debug.txt")
    app.MainLoop()

# ex:et:sw=4:ts=4
